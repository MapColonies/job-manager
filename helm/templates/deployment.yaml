{{- $releaseName := .Release.Name -}}
{{- $chartName := include "job-manager.name" . -}}
{{- $cloudProviderFlavor := include "job-manager.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "job-manager.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "job-manager.cloudProviderImagePullSecretName" . -}}
{{- $imageTag := include "job-manager.tag" . -}}

{{- if .Values.enabled -}}

{{ $sslSecretName := ternary .Values.authentication.ssl.externalSecretName (printf "%s%s" .Release.Name "-open-ssl") .Values.authentication.ssl.useExternal }}
{{ $postgresSecretName := ternary .Values.sharedData.db.secrets.externalSecretName (printf "%s%s" .Release.Name "-postgres-secret") .Values.sharedData.db.secrets.useExternal }}

{{- if .Values.authentication.ssl.enabled }}
{{- if and .Values.authentication.ssl.useExternal (not .Values.authentication.ssl.externalSecretName) }}
{{- fail "When using external ssl secret the value for .Values.authentication.ssl.externalSecretName should be set" }}
{{- end }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $releaseName }}-deployment
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "job-manager.environment" . }}
    release: {{ $releaseName }}
    {{- include "job-manager.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "job-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "job-manager.selectorLabels" . | nindent 8 }}
      {{- if .Values.resetOnConfigChange }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- end }}
    spec:
      {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
      {{- end }}
      containers:
        - name: {{ $releaseName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
          {{- end }}
          env:
          {{- if .Values.sharedData.ca.secretName }}
            - name: REQUESTS_CA_BUNDLE
              value: {{ printf "%s/%s" .Values.sharedData.ca.path .Values.sharedData.ca.key | quote }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "%s/%s" .Values.sharedData.ca.path .Values.sharedData.ca.key | quote }}
          {{- end }}
            - name: SERVER_PORT
              value: {{ .Values.env.targetPort | quote }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: password
            - name: DB_SSL_ENABLE
              value: {{ quote .Values.sharedData.db.sslEnabled }}
            - name: DB_SSL_CA
              value: "/opt/certs/ca/ca.pem"
            - name: DB_SSL_KEY
              value: "/opt/certs/key/key.pem"
            - name: DB_SSL_CERT
              value: "/opt/certs/cert/cert.pem"
          envFrom:
            - configMapRef:
                name: {{ $releaseName }}-configmap
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: "TCP"
          livenessProbe:
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            httpGet:
              path: /liveness
              port: {{ .Values.env.targetPort }}
          volumeMounts:
             {{- if .Values.sharedData.ca.secretName }}
            - name: root-ca
              mountPath: {{ printf "%s/%s" .Values.sharedData.ca.path .Values.sharedData.ca.key | quote }}
              subPath: {{ quote .Values.sharedData.ca.key }}
            {{- end }}
            {{- if .Values.authentication.ssl.enabled }}
            - name: open-ssl
              mountPath: "/etc/ssl/openssl.cnf"
              subPath: "openssl.cnf"
            {{- end }}
           {{- if .Values.sharedData.db.sslEnabled }}
            - name: ca-file
              mountPath: "/opt/certs/ca/ca.pem"
              subPath: ca.pem
            - name: key-file
              mountPath: "/opt/certs/key/key.pem"
              subPath: key.pem
            - name: cert-file
              mountPath: "/opt/certs/cert/cert.pem"
              subPath: cert.pem
          {{- end }}
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
      volumes:
        {{- if .Values.sharedData.ca.secretName }}
        - name: root-ca
          secret:
            secretName: {{ .Values.sharedData.ca.secretName }}
        {{- end }}
        {{- if .Values.authentication.ssl.enabled }}
        - name: open-ssl
          secret:
            secretName: {{ $sslSecretName }}
        {{- end }}
      {{- if .Values.sharedData.db.sslEnabled }}
        - name: ca-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: caFile
                path: ca.pem
        - name: key-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: keyFile
                path: key.pem
        - name: cert-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: certFile
                path: cert.pem
        {{- end }}
{{- end -}}
